# SPDX-License-Identifier: Apache-2.0
func min(x: Float, y: Float) {
    if x < y {
        return x;
    } else {
        return y;
    }
}

func max(x: Float, y: Float) {
    if x > y {
        return x;
    } else {
        return y;
    }
}

struct FuzzyNumber {
    type func new(x: Float) {
        return alloc(This){
            .x = x%1,
        };
    }

    operator &(other) {
        if other isa FuzzyNumber {
            return FuzzyNumber.new(min(this.x, other.x));
        } else {
            throw alloc(Unimplemented);
        }
    }

    operator |(other) {
        if other isa FuzzyNumber {
            return FuzzyNumber.new(max(this.x, other.x));
        } else {
            throw alloc(Unimplemented);
        }
    }

    operator u-() {
        return FuzzyNumber.new(1 - this.x);
    }

    operator ^(other) {
        if other isa FuzzyNumber {
            return (this | other) & -(this & other);
        } else {
            throw alloc(Unimplemented);
        }
    }

    operator ==(other) {
        if other isa FuzzyNumber {
            return this.x == other.x;
        } else {
            throw alloc(Unimplemented);
        }
    }
}

func main() {
    val a = FuzzyNumber.new(0.3f);
    val b = FuzzyNumber.new(0.4f);

    assert (a&b) == a;
    assert (a|b) == b;

    assert (a^b) == b;
}
