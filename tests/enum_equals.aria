# SPDX-License-Identifier: Apache-2.0
struct Integer {
    type func new(n: Int) {
        return alloc(This){
            .n = n,
        };
    }

    operator ==(rhs) {
        if rhs isa Integer {
            return rhs.n == this.n;
        } elsif rhs isa Int {
            return rhs == this.n;
        } else {
            throw alloc(Unimplemented);
        }
    }
}

enum Something {
    case WithPayload(Any),
    case WithoutPayload
}

func main() {
    val s1 = Something::WithoutPayload;

    assert s1 == Something::WithoutPayload;

    val s2 = Something::WithPayload(3);
    val s3 = Something::WithPayload(Integer.new(3));
    val s4 = Something::WithPayload(4);

    assert s2 == s3;
    assert s3 == s2;

    assert s3 != s4;
    assert s2 != s4;

    assert s4 != s3;
    assert s4 != s2;
    
    assert s1 != s2;
    assert s2 != s1;

    assert s3 != s1;
    assert s1 != s3;

    assert s1 != s4;
    assert s4 != s1;
}
