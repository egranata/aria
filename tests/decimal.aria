# SPDX-License-Identifier: Apache-2.0
import Decimal from aria.numerics.decimal;

func main() {
    assert Decimal.parse("3.14").unwrap_Some() + Decimal.parse("3.14").unwrap_Some() == Decimal.new(6.28f);
    assert 3 + Decimal.parse("5").unwrap_Some() == Decimal.new(8);
    assert 3.1f + Decimal.parse("2.5").unwrap_Some() == Decimal.new(5.6f);
    assert Decimal.parse("5").unwrap_Some() - Decimal.parse("3.1").unwrap_Some() == Decimal.parse("1.9").unwrap_Some();
    assert 4 - Decimal.parse("3.5").unwrap_Some() == Decimal.new(0.5f);

    assert Decimal.parse("3.14").unwrap_Some() * 2 == Decimal.new(6.28f);
    assert 2 * Decimal.parse("3.14").unwrap_Some() == Decimal.new(6.28f);
    assert Decimal.parse("12").unwrap_Some() / Decimal.new(3) == Decimal.new(4);
    assert 12 / Decimal.parse("3").unwrap_Some() == Decimal.new(4);

    assert Decimal.parse("3.14").unwrap_Some() > Decimal.parse("2.0").unwrap_Some();
    assert Decimal.parse("5.123").unwrap_Some() < Decimal.parse("6.28").unwrap_Some();

    assert Decimal.parse("5").unwrap_Some() != Decimal.parse("6").unwrap_Some();

    assert Decimal.new(5) >= Decimal.new(4);
    assert Decimal.new(5) >= Decimal.parse("5.00000").unwrap_Some();

    assert Decimal.parse("5.0").unwrap_Some() <= Decimal.new(5);
    assert Decimal.parse("5.0").unwrap_Some() <= Decimal.new(5.001);
}
