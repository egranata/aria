# SPDX-License-Identifier: Apache-2.0
struct Integer {
    type func new(n) {
        return alloc(This){
            .n = n,
        };
    }
}

extension Integer {
    operator * (rhs) {
        if rhs isa Integer {
            return Integer.new(this.n * rhs.n);
        } elsif rhs isa Int {
            return Integer.new(this.n * rhs);
        } else {
            throw alloc(Unimplemented);
        }
    }

    reverse operator * (lhs) {
        if lhs isa Integer {
            return Integer.new(lhs.n * this.n);
        } elsif lhs isa Int {
            return Integer.new(lhs * this.n);
        } else {
            throw alloc(Unimplemented);
        }
    }

    operator ==(rhs) {
        if rhs isa Integer {
            return rhs.n == this.n;
        } elsif rhs isa Int {
            return this.n == rhs;
        } else {
            throw alloc(Unimplemented);
        }
    }

    func prettyprint() {
        return "{0}".format(this.n);
    }
}

func main() {
    val x = Integer.new(4);
    val y = 7;

    assert x * y == 28;
    assert y * x == 28;

    assert x * y == Integer.new(28);
    assert y * x == Integer.new(28);
}
