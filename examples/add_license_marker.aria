# SPDX-License-Identifier: Apache-2.0
import File from aria.io.file;
import Path from aria.io.path;
import aria.iterator.mixin;

val rust_license_comment="// SPDX-License-Identifier: Apache-2.0";
val aria_license_comment="# SPDX-License-Identifier: Apache-2.0";

struct Checker {
    type func new(ext: String, marker: String, check: Bool, exclusions: List) = alloc(This) { .ext, .marker, .check, .exclusions };

    func should_exclude(path) {
        val path = path.prettyprint();
        return this.exclusions.any(|e| => path.contains(e));
    }

    operator()() {
        val glob_pattern = "**/*.{0}".format(this.ext);
        val glob_iterator = Path.glob(glob_pattern)!!;
        for file in glob_iterator {
            if this.should_exclude(file) {
                continue;
            }

            val line0 = File.open(file, File.OpenMode.new().read())!!.readln();
            if line0 != this.marker {
                if this.check {
                    println("[ERROR] file '{0}' missing license marker!".format(file));
                    return false;
                } else {
                    println("adding license marker to {0}".format(file));
                    val rest_of_file = File.open(file, File.OpenMode.new().read())!!.read_all();
                    File.open(file, File.OpenMode.new().write().truncate())!!.write("{0}\n{1}".format(this.marker, rest_of_file));
                }
            }
        }

        return true;
    }
}

func main(args) {
    val check = false;
    if args.len() == 1 && args[0] == "--check" {
        check = true;
    }

    val aria_checker = Checker.new("aria", aria_license_comment, check, ["target/"]);
    val rust_checker = Checker.new("rs", rust_license_comment, check, ["target/"]);

    if !aria_checker() || !rust_checker() {
        exit(1);
    }

    if check {
        println("all files have license markers");
    }
    exit(0);
}
