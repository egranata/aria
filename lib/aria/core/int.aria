# SPDX-License-Identifier: Apache-2.0
flag: no_std;

extension Int {
    func hash() {
        return this;
    }

    func abs() {
        return this >= 0 ? this : -this;
    }

    func float() {
        return this + 0.0f;
    }

    type func parse(s: String) {
        val index: Int = 0;

        val sign: Int = 1;
        if s.has_prefix("-") {
            sign = -1;
            index = 1;
        } elsif s.has_prefix("+") {
            index = 1;
        }
        if index > 0 {
            s = s.substring(index, s.len());
            index = 0;
        }

        val base: Int = 10;
        if s.has_prefix("0x") || s.has_prefix("0X") {
            index = 2;
            base = 16;
        } elsif s.has_prefix("0b") || s.has_prefix("0B") {
            index = 2;
            base = 2;
        } elsif s.has_prefix("0o") || s.has_prefix("0O") {
            index = 2;
            base = 8;
        }
        if index > 0 {
            s = s.substring(index, s.len());
            index = 0;
        }

        if s == "" {
            return Maybe::None;
        }

        match Int.parse_radix(s, base) {
            case Some(value) => {
                return Maybe::Some(sign * value);
            },
            case None => {
                return Maybe::None;
            },
        }
    }

    type func parse_radix(s: String, base: Int) {
        if base < 2 || base > 36 {
            return Maybe::None;
        }

        if s.len() == 0 {
            return Maybe::None;
        }

        val s: List = s.chars();

        val ret: Int = 0;
        val i: Int = 0;

        while i < s.len() {
            val chr = s[i];
            val digit = chr.encoding();
            match digit {
                >= 48 and <= 57 => {
                    # decimal digits
                    if (digit - 48) >= base {
                        return Maybe::None;
                    }
                    digit = digit - 48;
                },
                >= 65 and <= 90 => {
                    # uppercase letters
                    if (digit - 65 + 10) >= base {
                        return Maybe::None;
                    }
                    digit = digit - 65 + 10;
                },
                >= 97 and <= 122 => {
                    # lowercase letters
                    if (digit - 97 + 10) >= base {
                        return Maybe::None;
                    }
                    digit = digit - 97 + 10;
                },
            } else {
                return Maybe::None;
            }
            ret = ret * base + digit;
            i += 1;
        }

        return Maybe::Some(ret);
    }
}
