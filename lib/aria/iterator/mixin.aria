# SPDX-License-Identifier: Apache-2.0
struct FilteringIterator {
    type func new(i, f) {
        return alloc(This){
            .it = i,
            .clause = f,
        };
    }

    func next() {
        while true {
            val nv = this.it.next();
            if nv.done {
                return nv;
            }
            if this.clause(nv.value) {
                return nv;
            }
        }
    }
}

struct MappingIterator {
    type func new(i, f) {
        return alloc(This){
            .it = i,
            .clause = f,
        };
    }

    func next() {
        while true {
            val nv = this.it.next();
            if nv.done {
                return nv;
            }
            return Box() {
                .done = false,
                .value = this.clause(nv.value)
            };
        }
    }
}

func append_to_list(x,y) {
    x.append(y);
    return x;
}

func add(x,y) {
    return x+y;
}

func mul(x,y) {
    return x*y;
}

mixin Iterator {
    # allow running a for loop directly on an iterator
    func iterator() {
        return this;
    }

    func where(f) {
        return FilteringIterator.new(this,f);
    }

    func map(f) {
        return MappingIterator.new(this,f);
    }

    func to_list() {
        return this.reduce(append_to_list, []);
    }

    func all(f) {
        for v in this {
            if !f(v) {
                return false;
            }
        }
        return true;
    }

    func any(f) {
        for v in this {
            if f(v) {
                return true;
            }
        }
        return false;
    }

    func find(f) {
        for v in this {
            if f(v) {
                return Maybe::Some(v);
            }
        }
        return Maybe::None;
    }

    func position(f) {
        val index = 0;
        for v in this {
            if f(v) {
                return Maybe::Some(index);
            }
            index += 1;
        }
        return Maybe::None;
    }

    func reduce(f, v0) {
        val acc = v0;
        for v in this {
            acc = f(acc, v);
        }
        return acc;
    }

    func sum() {
        return this.reduce(add, 0);
    }

    func product() {
        return this.reduce(mul, 1);
    }

    func max() {
        val first_item = this.next();
        if first_item.done {
            return Maybe::None;
        }
        val current_max = first_item.value;
        for v in this {
            if v > current_max {
                current_max = v;
            }
        }
        return Maybe::Some(current_max);
    }

    func min() {
        val first_item = this.next();
        if first_item.done {
            return Maybe::None;
        }
        val current_min = first_item.value;
        for v in this {
            if v < current_min {
                current_min = v;
            }
        }
        return Maybe::Some(current_min);
    }

    func count() {
        val acc = 0;
        for _ in this {
            acc += 1;
        }
        return acc;
    }

    func first() {
        val first_item = this.next();
        if first_item.done {
            return Maybe::None;
        }
        return Maybe::Some(first_item.value);
    }

    func last() {
        val last_value = Maybe::None;
        for v in this {
            last_value = Maybe::Some(v);
        }
        return last_value;
    }

    func nth(n) {
        if n < 0 {
            return Maybe::None;
        }
        val current_index = 0;
        for v in this {
            if current_index == n {
                return Maybe::Some(v);
            }
            current_index += 1;
        }
        return Maybe::None;
    }
}


extension FilteringIterator {
    include Iterator
}

extension MappingIterator {
    include Iterator
}

extension List.ListIterator {
    include Iterator
}

mixin Iterable {
    func where(f) {
        return this.iterator().where(f);
    }

    func map(f) {
        return this.iterator().map(f);
    }

    func reduce(f,v0) {
        return this.iterator().reduce(f,v0);
    }

    func to_list() {
        return this.iterator().to_list();
    }

    func all(f) {
        return this.iterator().all(f);
    }

    func any(f) {
        return this.iterator().any(f);
    }

    func find(f) {
        return this.iterator().find(f);
    }

    func position(f) {
        return this.iterator().position(f);
    }

    func sum() {
        return this.iterator().sum();
    }

    func product() {
        return this.iterator().product();
    }

    func max() {
        return this.iterator().max();
    }

    func min() {
        return this.iterator().min();
    }

    func count() {
        return this.iterator().count();
    }

    func first() {
        return this.iterator().first();
    }

    func last() {
        return this.iterator().last();
    }

    func nth(n) {
        return this.iterator().nth(n);
    }
}

extension List {
    include Iterable
}
