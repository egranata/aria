# SPDX-License-Identifier: Apache-2.0
import aria.iterator.mixin;

func iter_or_self(i) {
    return hasattr(i, "iterator") ? i.iterator() : i;
}

func get_next(i) {
    return i.next();
}

struct Zip {
    type func new(...) {
        val iterators = varargs.iterator().map(iter_or_self).to_list();
        return alloc(This){
            .iterators = iterators,
        };
    }

    func iterator() {
        return this;
    }

    func next() {
        val next_values = [];
        for iter in this.iterators {
            match iter.next() {
                case None => { return Maybe::None; }
                case Some(x) => { next_values.append(x); }
            }
        }
        return Maybe::Some(next_values);
    }
}
